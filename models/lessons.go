// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Lesson is an object representing the database table.
type Lesson struct {
	ID          uint   `boil:"id" json:"id" toml:"id" yaml:"id"`
	LessonName  string `boil:"lesson_name" json:"lessonName" toml:"lessonName" yaml:"lessonName"`
	ImageURL    string `boil:"image_url" json:"imageURL" toml:"imageURL" yaml:"imageURL"`
	Description string `boil:"description" json:"description" toml:"description" yaml:"description"`
	Content     string `boil:"content" json:"content" toml:"content" yaml:"content"`
	ManagerID   uint   `boil:"manager_id" json:"managerID" toml:"managerID" yaml:"managerID"`

	R *lessonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lessonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LessonColumns = struct {
	ID          string
	LessonName  string
	ImageURL    string
	Description string
	Content     string
	ManagerID   string
}{
	ID:          "id",
	LessonName:  "lesson_name",
	ImageURL:    "image_url",
	Description: "description",
	Content:     "content",
	ManagerID:   "manager_id",
}

var LessonTableColumns = struct {
	ID          string
	LessonName  string
	ImageURL    string
	Description string
	Content     string
	ManagerID   string
}{
	ID:          "lessons.id",
	LessonName:  "lessons.lesson_name",
	ImageURL:    "lessons.image_url",
	Description: "lessons.description",
	Content:     "lessons.content",
	ManagerID:   "lessons.manager_id",
}

// Generated where

var LessonWhere = struct {
	ID          whereHelperuint
	LessonName  whereHelperstring
	ImageURL    whereHelperstring
	Description whereHelperstring
	Content     whereHelperstring
	ManagerID   whereHelperuint
}{
	ID:          whereHelperuint{field: "`lessons`.`id`"},
	LessonName:  whereHelperstring{field: "`lessons`.`lesson_name`"},
	ImageURL:    whereHelperstring{field: "`lessons`.`image_url`"},
	Description: whereHelperstring{field: "`lessons`.`description`"},
	Content:     whereHelperstring{field: "`lessons`.`content`"},
	ManagerID:   whereHelperuint{field: "`lessons`.`manager_id`"},
}

// LessonRels is where relationship names are stored.
var LessonRels = struct {
	Manager string
	Tests   string
	Words   string
}{
	Manager: "Manager",
	Tests:   "Tests",
	Words:   "Words",
}

// lessonR is where relationships are stored.
type lessonR struct {
	Manager *Manager  `boil:"Manager" json:"Manager" toml:"Manager" yaml:"Manager"`
	Tests   TestSlice `boil:"Tests" json:"Tests" toml:"Tests" yaml:"Tests"`
	Words   WordSlice `boil:"Words" json:"Words" toml:"Words" yaml:"Words"`
}

// NewStruct creates a new relationship struct
func (*lessonR) NewStruct() *lessonR {
	return &lessonR{}
}

func (r *lessonR) GetManager() *Manager {
	if r == nil {
		return nil
	}
	return r.Manager
}

func (r *lessonR) GetTests() TestSlice {
	if r == nil {
		return nil
	}
	return r.Tests
}

func (r *lessonR) GetWords() WordSlice {
	if r == nil {
		return nil
	}
	return r.Words
}

// lessonL is where Load methods for each relationship are stored.
type lessonL struct{}

var (
	lessonAllColumns            = []string{"id", "lesson_name", "image_url", "description", "content", "manager_id"}
	lessonColumnsWithoutDefault = []string{"lesson_name", "image_url", "description", "content", "manager_id"}
	lessonColumnsWithDefault    = []string{"id"}
	lessonPrimaryKeyColumns     = []string{"id"}
	lessonGeneratedColumns      = []string{}
)

type (
	// LessonSlice is an alias for a slice of pointers to Lesson.
	// This should almost always be used instead of []Lesson.
	LessonSlice []*Lesson
	// LessonHook is the signature for custom Lesson hook methods
	LessonHook func(context.Context, boil.ContextExecutor, *Lesson) error

	lessonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lessonType                 = reflect.TypeOf(&Lesson{})
	lessonMapping              = queries.MakeStructMapping(lessonType)
	lessonPrimaryKeyMapping, _ = queries.BindMapping(lessonType, lessonMapping, lessonPrimaryKeyColumns)
	lessonInsertCacheMut       sync.RWMutex
	lessonInsertCache          = make(map[string]insertCache)
	lessonUpdateCacheMut       sync.RWMutex
	lessonUpdateCache          = make(map[string]updateCache)
	lessonUpsertCacheMut       sync.RWMutex
	lessonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var lessonAfterSelectHooks []LessonHook

var lessonBeforeInsertHooks []LessonHook
var lessonAfterInsertHooks []LessonHook

var lessonBeforeUpdateHooks []LessonHook
var lessonAfterUpdateHooks []LessonHook

var lessonBeforeDeleteHooks []LessonHook
var lessonAfterDeleteHooks []LessonHook

var lessonBeforeUpsertHooks []LessonHook
var lessonAfterUpsertHooks []LessonHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Lesson) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lessonAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Lesson) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lessonBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Lesson) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lessonAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Lesson) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lessonBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Lesson) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lessonAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Lesson) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lessonBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Lesson) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lessonAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Lesson) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lessonBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Lesson) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lessonAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLessonHook registers your hook function for all future operations.
func AddLessonHook(hookPoint boil.HookPoint, lessonHook LessonHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		lessonAfterSelectHooks = append(lessonAfterSelectHooks, lessonHook)
	case boil.BeforeInsertHook:
		lessonBeforeInsertHooks = append(lessonBeforeInsertHooks, lessonHook)
	case boil.AfterInsertHook:
		lessonAfterInsertHooks = append(lessonAfterInsertHooks, lessonHook)
	case boil.BeforeUpdateHook:
		lessonBeforeUpdateHooks = append(lessonBeforeUpdateHooks, lessonHook)
	case boil.AfterUpdateHook:
		lessonAfterUpdateHooks = append(lessonAfterUpdateHooks, lessonHook)
	case boil.BeforeDeleteHook:
		lessonBeforeDeleteHooks = append(lessonBeforeDeleteHooks, lessonHook)
	case boil.AfterDeleteHook:
		lessonAfterDeleteHooks = append(lessonAfterDeleteHooks, lessonHook)
	case boil.BeforeUpsertHook:
		lessonBeforeUpsertHooks = append(lessonBeforeUpsertHooks, lessonHook)
	case boil.AfterUpsertHook:
		lessonAfterUpsertHooks = append(lessonAfterUpsertHooks, lessonHook)
	}
}

// One returns a single lesson record from the query.
func (q lessonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Lesson, error) {
	o := &Lesson{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for lessons")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Lesson records from the query.
func (q lessonQuery) All(ctx context.Context, exec boil.ContextExecutor) (LessonSlice, error) {
	var o []*Lesson

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Lesson slice")
	}

	if len(lessonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Lesson records in the query.
func (q lessonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count lessons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q lessonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if lessons exists")
	}

	return count > 0, nil
}

// Manager pointed to by the foreign key.
func (o *Lesson) Manager(mods ...qm.QueryMod) managerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ManagerID),
	}

	queryMods = append(queryMods, mods...)

	return Managers(queryMods...)
}

// Tests retrieves all the test's Tests with an executor.
func (o *Lesson) Tests(mods ...qm.QueryMod) testQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`tests`.`lesson_id`=?", o.ID),
	)

	return Tests(queryMods...)
}

// Words retrieves all the word's Words with an executor.
func (o *Lesson) Words(mods ...qm.QueryMod) wordQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`words_in_lessons` on `words`.`id` = `words_in_lessons`.`word_id`"),
		qm.Where("`words_in_lessons`.`lesson_id`=?", o.ID),
	)

	return Words(queryMods...)
}

// LoadManager allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (lessonL) LoadManager(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLesson interface{}, mods queries.Applicator) error {
	var slice []*Lesson
	var object *Lesson

	if singular {
		var ok bool
		object, ok = maybeLesson.(*Lesson)
		if !ok {
			object = new(Lesson)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLesson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLesson))
			}
		}
	} else {
		s, ok := maybeLesson.(*[]*Lesson)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLesson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLesson))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lessonR{}
		}
		args = append(args, object.ManagerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lessonR{}
			}

			for _, a := range args {
				if a == obj.ManagerID {
					continue Outer
				}
			}

			args = append(args, obj.ManagerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`managers`),
		qm.WhereIn(`managers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Manager")
	}

	var resultSlice []*Manager
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Manager")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for managers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for managers")
	}

	if len(lessonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Manager = foreign
		if foreign.R == nil {
			foreign.R = &managerR{}
		}
		foreign.R.Lessons = append(foreign.R.Lessons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ManagerID == foreign.ID {
				local.R.Manager = foreign
				if foreign.R == nil {
					foreign.R = &managerR{}
				}
				foreign.R.Lessons = append(foreign.R.Lessons, local)
				break
			}
		}
	}

	return nil
}

// LoadTests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (lessonL) LoadTests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLesson interface{}, mods queries.Applicator) error {
	var slice []*Lesson
	var object *Lesson

	if singular {
		var ok bool
		object, ok = maybeLesson.(*Lesson)
		if !ok {
			object = new(Lesson)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLesson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLesson))
			}
		}
	} else {
		s, ok := maybeLesson.(*[]*Lesson)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLesson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLesson))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lessonR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lessonR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tests`),
		qm.WhereIn(`tests.lesson_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tests")
	}

	var resultSlice []*Test
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tests")
	}

	if len(testAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &testR{}
			}
			foreign.R.Lesson = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LessonID {
				local.R.Tests = append(local.R.Tests, foreign)
				if foreign.R == nil {
					foreign.R = &testR{}
				}
				foreign.R.Lesson = local
				break
			}
		}
	}

	return nil
}

// LoadWords allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (lessonL) LoadWords(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLesson interface{}, mods queries.Applicator) error {
	var slice []*Lesson
	var object *Lesson

	if singular {
		var ok bool
		object, ok = maybeLesson.(*Lesson)
		if !ok {
			object = new(Lesson)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLesson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLesson))
			}
		}
	} else {
		s, ok := maybeLesson.(*[]*Lesson)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLesson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLesson))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lessonR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lessonR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`words`.`id`, `words`.`word`, `words`.`definition`, `words`.`example`, `words`.`type`, `words`.`pronounciation`, `words`.`manager_id`, `a`.`lesson_id`"),
		qm.From("`words`"),
		qm.InnerJoin("`words_in_lessons` as `a` on `words`.`id` = `a`.`word_id`"),
		qm.WhereIn("`a`.`lesson_id` in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load words")
	}

	var resultSlice []*Word

	var localJoinCols []uint
	for results.Next() {
		one := new(Word)
		var localJoinCol uint

		err = results.Scan(&one.ID, &one.Word, &one.Definition, &one.Example, &one.Type, &one.Pronounciation, &one.ManagerID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for words")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice words")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on words")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for words")
	}

	if len(wordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Words = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &wordR{}
			}
			foreign.R.Lessons = append(foreign.R.Lessons, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Words = append(local.R.Words, foreign)
				if foreign.R == nil {
					foreign.R = &wordR{}
				}
				foreign.R.Lessons = append(foreign.R.Lessons, local)
				break
			}
		}
	}

	return nil
}

// SetManager of the lesson to the related item.
// Sets o.R.Manager to related.
// Adds o to related.R.Lessons.
func (o *Lesson) SetManager(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Manager) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `lessons` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"manager_id"}),
		strmangle.WhereClause("`", "`", 0, lessonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ManagerID = related.ID
	if o.R == nil {
		o.R = &lessonR{
			Manager: related,
		}
	} else {
		o.R.Manager = related
	}

	if related.R == nil {
		related.R = &managerR{
			Lessons: LessonSlice{o},
		}
	} else {
		related.R.Lessons = append(related.R.Lessons, o)
	}

	return nil
}

// AddTests adds the given related objects to the existing relationships
// of the lesson, optionally inserting them as new records.
// Appends related to o.R.Tests.
// Sets related.R.Lesson appropriately.
func (o *Lesson) AddTests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Test) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LessonID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `tests` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"lesson_id"}),
				strmangle.WhereClause("`", "`", 0, testPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LessonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &lessonR{
			Tests: related,
		}
	} else {
		o.R.Tests = append(o.R.Tests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &testR{
				Lesson: o,
			}
		} else {
			rel.R.Lesson = o
		}
	}
	return nil
}

// AddWords adds the given related objects to the existing relationships
// of the lesson, optionally inserting them as new records.
// Appends related to o.R.Words.
// Sets related.R.Lessons appropriately.
func (o *Lesson) AddWords(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Word) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `words_in_lessons` (`lesson_id`, `word_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &lessonR{
			Words: related,
		}
	} else {
		o.R.Words = append(o.R.Words, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &wordR{
				Lessons: LessonSlice{o},
			}
		} else {
			rel.R.Lessons = append(rel.R.Lessons, o)
		}
	}
	return nil
}

// SetWords removes all previously related items of the
// lesson replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Lessons's Words accordingly.
// Replaces o.R.Words with related.
// Sets related.R.Lessons's Words accordingly.
func (o *Lesson) SetWords(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Word) error {
	query := "delete from `words_in_lessons` where `lesson_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeWordsFromLessonsSlice(o, related)
	if o.R != nil {
		o.R.Words = nil
	}

	return o.AddWords(ctx, exec, insert, related...)
}

// RemoveWords relationships from objects passed in.
// Removes related items from R.Words (uses pointer comparison, removal does not keep order)
// Sets related.R.Lessons.
func (o *Lesson) RemoveWords(ctx context.Context, exec boil.ContextExecutor, related ...*Word) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `words_in_lessons` where `lesson_id` = ? and `word_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeWordsFromLessonsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Words {
			if rel != ri {
				continue
			}

			ln := len(o.R.Words)
			if ln > 1 && i < ln-1 {
				o.R.Words[i] = o.R.Words[ln-1]
			}
			o.R.Words = o.R.Words[:ln-1]
			break
		}
	}

	return nil
}

func removeWordsFromLessonsSlice(o *Lesson, related []*Word) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Lessons {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Lessons)
			if ln > 1 && i < ln-1 {
				rel.R.Lessons[i] = rel.R.Lessons[ln-1]
			}
			rel.R.Lessons = rel.R.Lessons[:ln-1]
			break
		}
	}
}

// Lessons retrieves all the records using an executor.
func Lessons(mods ...qm.QueryMod) lessonQuery {
	mods = append(mods, qm.From("`lessons`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`lessons`.*"})
	}

	return lessonQuery{q}
}

// FindLesson retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLesson(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Lesson, error) {
	lessonObj := &Lesson{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `lessons` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, lessonObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from lessons")
	}

	if err = lessonObj.doAfterSelectHooks(ctx, exec); err != nil {
		return lessonObj, err
	}

	return lessonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Lesson) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no lessons provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lessonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lessonInsertCacheMut.RLock()
	cache, cached := lessonInsertCache[key]
	lessonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lessonAllColumns,
			lessonColumnsWithDefault,
			lessonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(lessonType, lessonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lessonType, lessonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `lessons` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `lessons` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `lessons` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, lessonPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into lessons")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == lessonMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for lessons")
	}

CacheNoHooks:
	if !cached {
		lessonInsertCacheMut.Lock()
		lessonInsertCache[key] = cache
		lessonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Lesson.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Lesson) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	lessonUpdateCacheMut.RLock()
	cache, cached := lessonUpdateCache[key]
	lessonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lessonAllColumns,
			lessonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update lessons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `lessons` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, lessonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lessonType, lessonMapping, append(wl, lessonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update lessons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for lessons")
	}

	if !cached {
		lessonUpdateCacheMut.Lock()
		lessonUpdateCache[key] = cache
		lessonUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q lessonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for lessons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for lessons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LessonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lessonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `lessons` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lessonPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in lesson slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all lesson")
	}
	return rowsAff, nil
}

var mySQLLessonUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Lesson) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no lessons provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lessonColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLLessonUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lessonUpsertCacheMut.RLock()
	cache, cached := lessonUpsertCache[key]
	lessonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			lessonAllColumns,
			lessonColumnsWithDefault,
			lessonColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			lessonAllColumns,
			lessonPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert lessons, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`lessons`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `lessons` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(lessonType, lessonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lessonType, lessonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for lessons")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == lessonMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(lessonType, lessonMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for lessons")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for lessons")
	}

CacheNoHooks:
	if !cached {
		lessonUpsertCacheMut.Lock()
		lessonUpsertCache[key] = cache
		lessonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Lesson record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Lesson) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Lesson provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lessonPrimaryKeyMapping)
	sql := "DELETE FROM `lessons` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from lessons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for lessons")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q lessonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no lessonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lessons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for lessons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LessonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(lessonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lessonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `lessons` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lessonPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lesson slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for lessons")
	}

	if len(lessonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Lesson) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLesson(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LessonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LessonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lessonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `lessons`.* FROM `lessons` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lessonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LessonSlice")
	}

	*o = slice

	return nil
}

// LessonExists checks if the Lesson row exists.
func LessonExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `lessons` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if lessons exists")
	}

	return exists, nil
}
