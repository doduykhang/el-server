// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Manager is an object representing the database table.
type Manager struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	LastName    string    `boil:"last_name" json:"lastName" toml:"lastName" yaml:"lastName"`
	FirstName   string    `boil:"first_name" json:"firstName" toml:"firstName" yaml:"firstName"`
	Gender      bool      `boil:"gender" json:"gender" toml:"gender" yaml:"gender"`
	DateOfBirth time.Time `boil:"date_of_birth" json:"dateOfBirth" toml:"dateOfBirth" yaml:"dateOfBirth"`
	Address     string    `boil:"address" json:"address" toml:"address" yaml:"address"`
	PhoneNumber string    `boil:"phone_number" json:"phoneNumber" toml:"phoneNumber" yaml:"phoneNumber"`
	AccountID   int       `boil:"account_id" json:"accountID" toml:"accountID" yaml:"accountID"`

	R *managerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L managerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ManagerColumns = struct {
	ID          string
	LastName    string
	FirstName   string
	Gender      string
	DateOfBirth string
	Address     string
	PhoneNumber string
	AccountID   string
}{
	ID:          "id",
	LastName:    "last_name",
	FirstName:   "first_name",
	Gender:      "gender",
	DateOfBirth: "date_of_birth",
	Address:     "address",
	PhoneNumber: "phone_number",
	AccountID:   "account_id",
}

var ManagerTableColumns = struct {
	ID          string
	LastName    string
	FirstName   string
	Gender      string
	DateOfBirth string
	Address     string
	PhoneNumber string
	AccountID   string
}{
	ID:          "managers.id",
	LastName:    "managers.last_name",
	FirstName:   "managers.first_name",
	Gender:      "managers.gender",
	DateOfBirth: "managers.date_of_birth",
	Address:     "managers.address",
	PhoneNumber: "managers.phone_number",
	AccountID:   "managers.account_id",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ManagerWhere = struct {
	ID          whereHelperint
	LastName    whereHelperstring
	FirstName   whereHelperstring
	Gender      whereHelperbool
	DateOfBirth whereHelpertime_Time
	Address     whereHelperstring
	PhoneNumber whereHelperstring
	AccountID   whereHelperint
}{
	ID:          whereHelperint{field: "\"managers\".\"id\""},
	LastName:    whereHelperstring{field: "\"managers\".\"last_name\""},
	FirstName:   whereHelperstring{field: "\"managers\".\"first_name\""},
	Gender:      whereHelperbool{field: "\"managers\".\"gender\""},
	DateOfBirth: whereHelpertime_Time{field: "\"managers\".\"date_of_birth\""},
	Address:     whereHelperstring{field: "\"managers\".\"address\""},
	PhoneNumber: whereHelperstring{field: "\"managers\".\"phone_number\""},
	AccountID:   whereHelperint{field: "\"managers\".\"account_id\""},
}

// ManagerRels is where relationship names are stored.
var ManagerRels = struct {
	Account   string
	Lessons   string
	Questions string
	Tests     string
	Words     string
}{
	Account:   "Account",
	Lessons:   "Lessons",
	Questions: "Questions",
	Tests:     "Tests",
	Words:     "Words",
}

// managerR is where relationships are stored.
type managerR struct {
	Account   *Account      `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
	Lessons   LessonSlice   `boil:"Lessons" json:"Lessons" toml:"Lessons" yaml:"Lessons"`
	Questions QuestionSlice `boil:"Questions" json:"Questions" toml:"Questions" yaml:"Questions"`
	Tests     TestSlice     `boil:"Tests" json:"Tests" toml:"Tests" yaml:"Tests"`
	Words     WordSlice     `boil:"Words" json:"Words" toml:"Words" yaml:"Words"`
}

// NewStruct creates a new relationship struct
func (*managerR) NewStruct() *managerR {
	return &managerR{}
}

func (r *managerR) GetAccount() *Account {
	if r == nil {
		return nil
	}
	return r.Account
}

func (r *managerR) GetLessons() LessonSlice {
	if r == nil {
		return nil
	}
	return r.Lessons
}

func (r *managerR) GetQuestions() QuestionSlice {
	if r == nil {
		return nil
	}
	return r.Questions
}

func (r *managerR) GetTests() TestSlice {
	if r == nil {
		return nil
	}
	return r.Tests
}

func (r *managerR) GetWords() WordSlice {
	if r == nil {
		return nil
	}
	return r.Words
}

// managerL is where Load methods for each relationship are stored.
type managerL struct{}

var (
	managerAllColumns            = []string{"id", "last_name", "first_name", "gender", "date_of_birth", "address", "phone_number", "account_id"}
	managerColumnsWithoutDefault = []string{"last_name", "first_name", "gender", "date_of_birth", "address", "phone_number", "account_id"}
	managerColumnsWithDefault    = []string{"id"}
	managerPrimaryKeyColumns     = []string{"id"}
	managerGeneratedColumns      = []string{}
)

type (
	// ManagerSlice is an alias for a slice of pointers to Manager.
	// This should almost always be used instead of []Manager.
	ManagerSlice []*Manager
	// ManagerHook is the signature for custom Manager hook methods
	ManagerHook func(context.Context, boil.ContextExecutor, *Manager) error

	managerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	managerType                 = reflect.TypeOf(&Manager{})
	managerMapping              = queries.MakeStructMapping(managerType)
	managerPrimaryKeyMapping, _ = queries.BindMapping(managerType, managerMapping, managerPrimaryKeyColumns)
	managerInsertCacheMut       sync.RWMutex
	managerInsertCache          = make(map[string]insertCache)
	managerUpdateCacheMut       sync.RWMutex
	managerUpdateCache          = make(map[string]updateCache)
	managerUpsertCacheMut       sync.RWMutex
	managerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var managerAfterSelectHooks []ManagerHook

var managerBeforeInsertHooks []ManagerHook
var managerAfterInsertHooks []ManagerHook

var managerBeforeUpdateHooks []ManagerHook
var managerAfterUpdateHooks []ManagerHook

var managerBeforeDeleteHooks []ManagerHook
var managerAfterDeleteHooks []ManagerHook

var managerBeforeUpsertHooks []ManagerHook
var managerAfterUpsertHooks []ManagerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Manager) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range managerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Manager) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range managerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Manager) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range managerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Manager) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range managerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Manager) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range managerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Manager) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range managerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Manager) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range managerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Manager) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range managerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Manager) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range managerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddManagerHook registers your hook function for all future operations.
func AddManagerHook(hookPoint boil.HookPoint, managerHook ManagerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		managerAfterSelectHooks = append(managerAfterSelectHooks, managerHook)
	case boil.BeforeInsertHook:
		managerBeforeInsertHooks = append(managerBeforeInsertHooks, managerHook)
	case boil.AfterInsertHook:
		managerAfterInsertHooks = append(managerAfterInsertHooks, managerHook)
	case boil.BeforeUpdateHook:
		managerBeforeUpdateHooks = append(managerBeforeUpdateHooks, managerHook)
	case boil.AfterUpdateHook:
		managerAfterUpdateHooks = append(managerAfterUpdateHooks, managerHook)
	case boil.BeforeDeleteHook:
		managerBeforeDeleteHooks = append(managerBeforeDeleteHooks, managerHook)
	case boil.AfterDeleteHook:
		managerAfterDeleteHooks = append(managerAfterDeleteHooks, managerHook)
	case boil.BeforeUpsertHook:
		managerBeforeUpsertHooks = append(managerBeforeUpsertHooks, managerHook)
	case boil.AfterUpsertHook:
		managerAfterUpsertHooks = append(managerAfterUpsertHooks, managerHook)
	}
}

// One returns a single manager record from the query.
func (q managerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Manager, error) {
	o := &Manager{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for managers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Manager records from the query.
func (q managerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ManagerSlice, error) {
	var o []*Manager

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Manager slice")
	}

	if len(managerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Manager records in the query.
func (q managerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count managers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q managerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if managers exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *Manager) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// Lessons retrieves all the lesson's Lessons with an executor.
func (o *Manager) Lessons(mods ...qm.QueryMod) lessonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"lessons\".\"manager_id\"=?", o.ID),
	)

	return Lessons(queryMods...)
}

// Questions retrieves all the question's Questions with an executor.
func (o *Manager) Questions(mods ...qm.QueryMod) questionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"questions\".\"manager_id\"=?", o.ID),
	)

	return Questions(queryMods...)
}

// Tests retrieves all the test's Tests with an executor.
func (o *Manager) Tests(mods ...qm.QueryMod) testQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tests\".\"manager_id\"=?", o.ID),
	)

	return Tests(queryMods...)
}

// Words retrieves all the word's Words with an executor.
func (o *Manager) Words(mods ...qm.QueryMod) wordQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"words\".\"manager_id\"=?", o.ID),
	)

	return Words(queryMods...)
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (managerL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeManager interface{}, mods queries.Applicator) error {
	var slice []*Manager
	var object *Manager

	if singular {
		object = maybeManager.(*Manager)
	} else {
		slice = *maybeManager.(*[]*Manager)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &managerR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &managerR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`accounts`),
		qm.WhereIn(`accounts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(managerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.Manager = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.Manager = local
				break
			}
		}
	}

	return nil
}

// LoadLessons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (managerL) LoadLessons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeManager interface{}, mods queries.Applicator) error {
	var slice []*Manager
	var object *Manager

	if singular {
		object = maybeManager.(*Manager)
	} else {
		slice = *maybeManager.(*[]*Manager)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &managerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &managerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`lessons`),
		qm.WhereIn(`lessons.manager_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load lessons")
	}

	var resultSlice []*Lesson
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice lessons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on lessons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for lessons")
	}

	if len(lessonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Lessons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &lessonR{}
			}
			foreign.R.Manager = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ManagerID {
				local.R.Lessons = append(local.R.Lessons, foreign)
				if foreign.R == nil {
					foreign.R = &lessonR{}
				}
				foreign.R.Manager = local
				break
			}
		}
	}

	return nil
}

// LoadQuestions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (managerL) LoadQuestions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeManager interface{}, mods queries.Applicator) error {
	var slice []*Manager
	var object *Manager

	if singular {
		object = maybeManager.(*Manager)
	} else {
		slice = *maybeManager.(*[]*Manager)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &managerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &managerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`questions`),
		qm.WhereIn(`questions.manager_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load questions")
	}

	var resultSlice []*Question
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice questions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on questions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for questions")
	}

	if len(questionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Questions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &questionR{}
			}
			foreign.R.Manager = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ManagerID {
				local.R.Questions = append(local.R.Questions, foreign)
				if foreign.R == nil {
					foreign.R = &questionR{}
				}
				foreign.R.Manager = local
				break
			}
		}
	}

	return nil
}

// LoadTests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (managerL) LoadTests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeManager interface{}, mods queries.Applicator) error {
	var slice []*Manager
	var object *Manager

	if singular {
		object = maybeManager.(*Manager)
	} else {
		slice = *maybeManager.(*[]*Manager)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &managerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &managerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tests`),
		qm.WhereIn(`tests.manager_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tests")
	}

	var resultSlice []*Test
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tests")
	}

	if len(testAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &testR{}
			}
			foreign.R.Manager = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ManagerID {
				local.R.Tests = append(local.R.Tests, foreign)
				if foreign.R == nil {
					foreign.R = &testR{}
				}
				foreign.R.Manager = local
				break
			}
		}
	}

	return nil
}

// LoadWords allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (managerL) LoadWords(ctx context.Context, e boil.ContextExecutor, singular bool, maybeManager interface{}, mods queries.Applicator) error {
	var slice []*Manager
	var object *Manager

	if singular {
		object = maybeManager.(*Manager)
	} else {
		slice = *maybeManager.(*[]*Manager)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &managerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &managerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`words`),
		qm.WhereIn(`words.manager_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load words")
	}

	var resultSlice []*Word
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice words")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on words")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for words")
	}

	if len(wordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Words = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &wordR{}
			}
			foreign.R.Manager = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ManagerID {
				local.R.Words = append(local.R.Words, foreign)
				if foreign.R == nil {
					foreign.R = &wordR{}
				}
				foreign.R.Manager = local
				break
			}
		}
	}

	return nil
}

// SetAccount of the manager to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.Manager.
func (o *Manager) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"managers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, managerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &managerR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			Manager: o,
		}
	} else {
		related.R.Manager = o
	}

	return nil
}

// AddLessons adds the given related objects to the existing relationships
// of the manager, optionally inserting them as new records.
// Appends related to o.R.Lessons.
// Sets related.R.Manager appropriately.
func (o *Manager) AddLessons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Lesson) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ManagerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"lessons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"manager_id"}),
				strmangle.WhereClause("\"", "\"", 2, lessonPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ManagerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &managerR{
			Lessons: related,
		}
	} else {
		o.R.Lessons = append(o.R.Lessons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &lessonR{
				Manager: o,
			}
		} else {
			rel.R.Manager = o
		}
	}
	return nil
}

// AddQuestions adds the given related objects to the existing relationships
// of the manager, optionally inserting them as new records.
// Appends related to o.R.Questions.
// Sets related.R.Manager appropriately.
func (o *Manager) AddQuestions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Question) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ManagerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"questions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"manager_id"}),
				strmangle.WhereClause("\"", "\"", 2, questionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ManagerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &managerR{
			Questions: related,
		}
	} else {
		o.R.Questions = append(o.R.Questions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &questionR{
				Manager: o,
			}
		} else {
			rel.R.Manager = o
		}
	}
	return nil
}

// AddTests adds the given related objects to the existing relationships
// of the manager, optionally inserting them as new records.
// Appends related to o.R.Tests.
// Sets related.R.Manager appropriately.
func (o *Manager) AddTests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Test) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ManagerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"manager_id"}),
				strmangle.WhereClause("\"", "\"", 2, testPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ManagerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &managerR{
			Tests: related,
		}
	} else {
		o.R.Tests = append(o.R.Tests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &testR{
				Manager: o,
			}
		} else {
			rel.R.Manager = o
		}
	}
	return nil
}

// AddWords adds the given related objects to the existing relationships
// of the manager, optionally inserting them as new records.
// Appends related to o.R.Words.
// Sets related.R.Manager appropriately.
func (o *Manager) AddWords(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Word) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ManagerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"words\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"manager_id"}),
				strmangle.WhereClause("\"", "\"", 2, wordPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ManagerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &managerR{
			Words: related,
		}
	} else {
		o.R.Words = append(o.R.Words, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &wordR{
				Manager: o,
			}
		} else {
			rel.R.Manager = o
		}
	}
	return nil
}

// Managers retrieves all the records using an executor.
func Managers(mods ...qm.QueryMod) managerQuery {
	mods = append(mods, qm.From("\"managers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"managers\".*"})
	}

	return managerQuery{q}
}

// FindManager retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindManager(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Manager, error) {
	managerObj := &Manager{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"managers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, managerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from managers")
	}

	if err = managerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return managerObj, err
	}

	return managerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Manager) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no managers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(managerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	managerInsertCacheMut.RLock()
	cache, cached := managerInsertCache[key]
	managerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			managerAllColumns,
			managerColumnsWithDefault,
			managerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(managerType, managerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(managerType, managerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"managers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"managers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into managers")
	}

	if !cached {
		managerInsertCacheMut.Lock()
		managerInsertCache[key] = cache
		managerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Manager.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Manager) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	managerUpdateCacheMut.RLock()
	cache, cached := managerUpdateCache[key]
	managerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			managerAllColumns,
			managerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update managers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"managers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, managerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(managerType, managerMapping, append(wl, managerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update managers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for managers")
	}

	if !cached {
		managerUpdateCacheMut.Lock()
		managerUpdateCache[key] = cache
		managerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q managerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for managers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for managers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ManagerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), managerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"managers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, managerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in manager slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all manager")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Manager) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no managers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(managerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	managerUpsertCacheMut.RLock()
	cache, cached := managerUpsertCache[key]
	managerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			managerAllColumns,
			managerColumnsWithDefault,
			managerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			managerAllColumns,
			managerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert managers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(managerPrimaryKeyColumns))
			copy(conflict, managerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"managers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(managerType, managerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(managerType, managerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert managers")
	}

	if !cached {
		managerUpsertCacheMut.Lock()
		managerUpsertCache[key] = cache
		managerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Manager record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Manager) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Manager provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), managerPrimaryKeyMapping)
	sql := "DELETE FROM \"managers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from managers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for managers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q managerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no managerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from managers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for managers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ManagerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(managerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), managerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"managers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, managerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from manager slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for managers")
	}

	if len(managerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Manager) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindManager(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ManagerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ManagerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), managerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"managers\".* FROM \"managers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, managerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ManagerSlice")
	}

	*o = slice

	return nil
}

// ManagerExists checks if the Manager row exists.
func ManagerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"managers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if managers exists")
	}

	return exists, nil
}
