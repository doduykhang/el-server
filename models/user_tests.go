// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserTest is an object representing the database table.
type UserTest struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Time         int       `boil:"time" json:"time" toml:"time" yaml:"time"`
	StartedTime  time.Time `boil:"started_time" json:"startedTime" toml:"startedTime" yaml:"startedTime"`
	FinishedTime time.Time `boil:"finished_time" json:"finishedTime" toml:"finishedTime" yaml:"finishedTime"`
	TestID       int       `boil:"test_id" json:"testID" toml:"testID" yaml:"testID"`
	UserID       int       `boil:"user_id" json:"userID" toml:"userID" yaml:"userID"`

	R *userTestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userTestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserTestColumns = struct {
	ID           string
	Time         string
	StartedTime  string
	FinishedTime string
	TestID       string
	UserID       string
}{
	ID:           "id",
	Time:         "time",
	StartedTime:  "started_time",
	FinishedTime: "finished_time",
	TestID:       "test_id",
	UserID:       "user_id",
}

var UserTestTableColumns = struct {
	ID           string
	Time         string
	StartedTime  string
	FinishedTime string
	TestID       string
	UserID       string
}{
	ID:           "user_tests.id",
	Time:         "user_tests.time",
	StartedTime:  "user_tests.started_time",
	FinishedTime: "user_tests.finished_time",
	TestID:       "user_tests.test_id",
	UserID:       "user_tests.user_id",
}

// Generated where

var UserTestWhere = struct {
	ID           whereHelperint
	Time         whereHelperint
	StartedTime  whereHelpertime_Time
	FinishedTime whereHelpertime_Time
	TestID       whereHelperint
	UserID       whereHelperint
}{
	ID:           whereHelperint{field: "\"user_tests\".\"id\""},
	Time:         whereHelperint{field: "\"user_tests\".\"time\""},
	StartedTime:  whereHelpertime_Time{field: "\"user_tests\".\"started_time\""},
	FinishedTime: whereHelpertime_Time{field: "\"user_tests\".\"finished_time\""},
	TestID:       whereHelperint{field: "\"user_tests\".\"test_id\""},
	UserID:       whereHelperint{field: "\"user_tests\".\"user_id\""},
}

// UserTestRels is where relationship names are stored.
var UserTestRels = struct {
	Test            string
	User            string
	UserTestDetails string
}{
	Test:            "Test",
	User:            "User",
	UserTestDetails: "UserTestDetails",
}

// userTestR is where relationships are stored.
type userTestR struct {
	Test            *Test               `boil:"Test" json:"Test" toml:"Test" yaml:"Test"`
	User            *User               `boil:"User" json:"User" toml:"User" yaml:"User"`
	UserTestDetails UserTestDetailSlice `boil:"UserTestDetails" json:"UserTestDetails" toml:"UserTestDetails" yaml:"UserTestDetails"`
}

// NewStruct creates a new relationship struct
func (*userTestR) NewStruct() *userTestR {
	return &userTestR{}
}

func (r *userTestR) GetTest() *Test {
	if r == nil {
		return nil
	}
	return r.Test
}

func (r *userTestR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *userTestR) GetUserTestDetails() UserTestDetailSlice {
	if r == nil {
		return nil
	}
	return r.UserTestDetails
}

// userTestL is where Load methods for each relationship are stored.
type userTestL struct{}

var (
	userTestAllColumns            = []string{"id", "time", "started_time", "finished_time", "test_id", "user_id"}
	userTestColumnsWithoutDefault = []string{"id", "time", "started_time", "finished_time", "test_id", "user_id"}
	userTestColumnsWithDefault    = []string{}
	userTestPrimaryKeyColumns     = []string{"id"}
	userTestGeneratedColumns      = []string{}
)

type (
	// UserTestSlice is an alias for a slice of pointers to UserTest.
	// This should almost always be used instead of []UserTest.
	UserTestSlice []*UserTest
	// UserTestHook is the signature for custom UserTest hook methods
	UserTestHook func(context.Context, boil.ContextExecutor, *UserTest) error

	userTestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userTestType                 = reflect.TypeOf(&UserTest{})
	userTestMapping              = queries.MakeStructMapping(userTestType)
	userTestPrimaryKeyMapping, _ = queries.BindMapping(userTestType, userTestMapping, userTestPrimaryKeyColumns)
	userTestInsertCacheMut       sync.RWMutex
	userTestInsertCache          = make(map[string]insertCache)
	userTestUpdateCacheMut       sync.RWMutex
	userTestUpdateCache          = make(map[string]updateCache)
	userTestUpsertCacheMut       sync.RWMutex
	userTestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userTestAfterSelectHooks []UserTestHook

var userTestBeforeInsertHooks []UserTestHook
var userTestAfterInsertHooks []UserTestHook

var userTestBeforeUpdateHooks []UserTestHook
var userTestAfterUpdateHooks []UserTestHook

var userTestBeforeDeleteHooks []UserTestHook
var userTestAfterDeleteHooks []UserTestHook

var userTestBeforeUpsertHooks []UserTestHook
var userTestAfterUpsertHooks []UserTestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserTest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserTest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserTest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserTest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserTest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserTest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserTest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserTest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserTest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserTestHook registers your hook function for all future operations.
func AddUserTestHook(hookPoint boil.HookPoint, userTestHook UserTestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userTestAfterSelectHooks = append(userTestAfterSelectHooks, userTestHook)
	case boil.BeforeInsertHook:
		userTestBeforeInsertHooks = append(userTestBeforeInsertHooks, userTestHook)
	case boil.AfterInsertHook:
		userTestAfterInsertHooks = append(userTestAfterInsertHooks, userTestHook)
	case boil.BeforeUpdateHook:
		userTestBeforeUpdateHooks = append(userTestBeforeUpdateHooks, userTestHook)
	case boil.AfterUpdateHook:
		userTestAfterUpdateHooks = append(userTestAfterUpdateHooks, userTestHook)
	case boil.BeforeDeleteHook:
		userTestBeforeDeleteHooks = append(userTestBeforeDeleteHooks, userTestHook)
	case boil.AfterDeleteHook:
		userTestAfterDeleteHooks = append(userTestAfterDeleteHooks, userTestHook)
	case boil.BeforeUpsertHook:
		userTestBeforeUpsertHooks = append(userTestBeforeUpsertHooks, userTestHook)
	case boil.AfterUpsertHook:
		userTestAfterUpsertHooks = append(userTestAfterUpsertHooks, userTestHook)
	}
}

// One returns a single userTest record from the query.
func (q userTestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserTest, error) {
	o := &UserTest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_tests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserTest records from the query.
func (q userTestQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserTestSlice, error) {
	var o []*UserTest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserTest slice")
	}

	if len(userTestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserTest records in the query.
func (q userTestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_tests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userTestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_tests exists")
	}

	return count > 0, nil
}

// Test pointed to by the foreign key.
func (o *UserTest) Test(mods ...qm.QueryMod) testQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TestID),
	}

	queryMods = append(queryMods, mods...)

	return Tests(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserTest) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// UserTestDetails retrieves all the user_test_detail's UserTestDetails with an executor.
func (o *UserTest) UserTestDetails(mods ...qm.QueryMod) userTestDetailQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_test_detail\".\"user_test_id\"=?", o.ID),
	)

	return UserTestDetails(queryMods...)
}

// LoadTest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTestL) LoadTest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserTest interface{}, mods queries.Applicator) error {
	var slice []*UserTest
	var object *UserTest

	if singular {
		object = maybeUserTest.(*UserTest)
	} else {
		slice = *maybeUserTest.(*[]*UserTest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTestR{}
		}
		args = append(args, object.TestID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTestR{}
			}

			for _, a := range args {
				if a == obj.TestID {
					continue Outer
				}
			}

			args = append(args, obj.TestID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tests`),
		qm.WhereIn(`tests.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Test")
	}

	var resultSlice []*Test
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Test")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tests")
	}

	if len(userTestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Test = foreign
		if foreign.R == nil {
			foreign.R = &testR{}
		}
		foreign.R.UserTests = append(foreign.R.UserTests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TestID == foreign.ID {
				local.R.Test = foreign
				if foreign.R == nil {
					foreign.R = &testR{}
				}
				foreign.R.UserTests = append(foreign.R.UserTests, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTestL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserTest interface{}, mods queries.Applicator) error {
	var slice []*UserTest
	var object *UserTest

	if singular {
		object = maybeUserTest.(*UserTest)
	} else {
		slice = *maybeUserTest.(*[]*UserTest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTestR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTestR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userTestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserTests = append(foreign.R.UserTests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserTests = append(foreign.R.UserTests, local)
				break
			}
		}
	}

	return nil
}

// LoadUserTestDetails allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userTestL) LoadUserTestDetails(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserTest interface{}, mods queries.Applicator) error {
	var slice []*UserTest
	var object *UserTest

	if singular {
		object = maybeUserTest.(*UserTest)
	} else {
		slice = *maybeUserTest.(*[]*UserTest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTestR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTestR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_test_detail`),
		qm.WhereIn(`user_test_detail.user_test_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_test_detail")
	}

	var resultSlice []*UserTestDetail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_test_detail")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_test_detail")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_test_detail")
	}

	if len(userTestDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserTestDetails = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userTestDetailR{}
			}
			foreign.R.UserTest = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserTestID {
				local.R.UserTestDetails = append(local.R.UserTestDetails, foreign)
				if foreign.R == nil {
					foreign.R = &userTestDetailR{}
				}
				foreign.R.UserTest = local
				break
			}
		}
	}

	return nil
}

// SetTest of the userTest to the related item.
// Sets o.R.Test to related.
// Adds o to related.R.UserTests.
func (o *UserTest) SetTest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Test) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_tests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"test_id"}),
		strmangle.WhereClause("\"", "\"", 2, userTestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TestID = related.ID
	if o.R == nil {
		o.R = &userTestR{
			Test: related,
		}
	} else {
		o.R.Test = related
	}

	if related.R == nil {
		related.R = &testR{
			UserTests: UserTestSlice{o},
		}
	} else {
		related.R.UserTests = append(related.R.UserTests, o)
	}

	return nil
}

// SetUser of the userTest to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserTests.
func (o *UserTest) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_tests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userTestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userTestR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserTests: UserTestSlice{o},
		}
	} else {
		related.R.UserTests = append(related.R.UserTests, o)
	}

	return nil
}

// AddUserTestDetails adds the given related objects to the existing relationships
// of the user_test, optionally inserting them as new records.
// Appends related to o.R.UserTestDetails.
// Sets related.R.UserTest appropriately.
func (o *UserTest) AddUserTestDetails(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserTestDetail) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserTestID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_test_detail\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_test_id"}),
				strmangle.WhereClause("\"", "\"", 2, userTestDetailPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserTestID, rel.QuestionID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserTestID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userTestR{
			UserTestDetails: related,
		}
	} else {
		o.R.UserTestDetails = append(o.R.UserTestDetails, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userTestDetailR{
				UserTest: o,
			}
		} else {
			rel.R.UserTest = o
		}
	}
	return nil
}

// UserTests retrieves all the records using an executor.
func UserTests(mods ...qm.QueryMod) userTestQuery {
	mods = append(mods, qm.From("\"user_tests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_tests\".*"})
	}

	return userTestQuery{q}
}

// FindUserTest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserTest(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserTest, error) {
	userTestObj := &UserTest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_tests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userTestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_tests")
	}

	if err = userTestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userTestObj, err
	}

	return userTestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserTest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_tests provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userTestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userTestInsertCacheMut.RLock()
	cache, cached := userTestInsertCache[key]
	userTestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userTestAllColumns,
			userTestColumnsWithDefault,
			userTestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userTestType, userTestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userTestType, userTestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_tests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_tests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_tests")
	}

	if !cached {
		userTestInsertCacheMut.Lock()
		userTestInsertCache[key] = cache
		userTestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserTest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserTest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userTestUpdateCacheMut.RLock()
	cache, cached := userTestUpdateCache[key]
	userTestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userTestAllColumns,
			userTestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_tests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_tests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userTestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userTestType, userTestMapping, append(wl, userTestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_tests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_tests")
	}

	if !cached {
		userTestUpdateCacheMut.Lock()
		userTestUpdateCache[key] = cache
		userTestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userTestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_tests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_tests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserTestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_tests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userTestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userTest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userTest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserTest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_tests provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userTestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userTestUpsertCacheMut.RLock()
	cache, cached := userTestUpsertCache[key]
	userTestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userTestAllColumns,
			userTestColumnsWithDefault,
			userTestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userTestAllColumns,
			userTestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_tests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userTestPrimaryKeyColumns))
			copy(conflict, userTestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_tests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userTestType, userTestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userTestType, userTestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_tests")
	}

	if !cached {
		userTestUpsertCacheMut.Lock()
		userTestUpsertCache[key] = cache
		userTestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserTest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserTest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserTest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userTestPrimaryKeyMapping)
	sql := "DELETE FROM \"user_tests\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_tests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_tests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userTestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userTestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_tests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_tests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserTestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userTestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_tests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userTestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userTest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_tests")
	}

	if len(userTestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserTest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserTest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserTestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserTestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_tests\".* FROM \"user_tests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userTestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserTestSlice")
	}

	*o = slice

	return nil
}

// UserTestExists checks if the UserTest row exists.
func UserTestExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_tests\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_tests exists")
	}

	return exists, nil
}
