// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Word is an object representing the database table.
type Word struct {
	ID             uint   `boil:"id" json:"id" toml:"id" yaml:"id"`
	Word           string `boil:"word" json:"word" toml:"word" yaml:"word"`
	Definition     string `boil:"definition" json:"definition" toml:"definition" yaml:"definition"`
	Example        string `boil:"example" json:"example" toml:"example" yaml:"example"`
	Type           string `boil:"type" json:"type" toml:"type" yaml:"type"`
	Pronounciation string `boil:"pronounciation" json:"pronounciation" toml:"pronounciation" yaml:"pronounciation"`
	ManagerID      uint   `boil:"manager_id" json:"managerID" toml:"managerID" yaml:"managerID"`

	R *wordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L wordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WordColumns = struct {
	ID             string
	Word           string
	Definition     string
	Example        string
	Type           string
	Pronounciation string
	ManagerID      string
}{
	ID:             "id",
	Word:           "word",
	Definition:     "definition",
	Example:        "example",
	Type:           "type",
	Pronounciation: "pronounciation",
	ManagerID:      "manager_id",
}

var WordTableColumns = struct {
	ID             string
	Word           string
	Definition     string
	Example        string
	Type           string
	Pronounciation string
	ManagerID      string
}{
	ID:             "words.id",
	Word:           "words.word",
	Definition:     "words.definition",
	Example:        "words.example",
	Type:           "words.type",
	Pronounciation: "words.pronounciation",
	ManagerID:      "words.manager_id",
}

// Generated where

var WordWhere = struct {
	ID             whereHelperuint
	Word           whereHelperstring
	Definition     whereHelperstring
	Example        whereHelperstring
	Type           whereHelperstring
	Pronounciation whereHelperstring
	ManagerID      whereHelperuint
}{
	ID:             whereHelperuint{field: "`words`.`id`"},
	Word:           whereHelperstring{field: "`words`.`word`"},
	Definition:     whereHelperstring{field: "`words`.`definition`"},
	Example:        whereHelperstring{field: "`words`.`example`"},
	Type:           whereHelperstring{field: "`words`.`type`"},
	Pronounciation: whereHelperstring{field: "`words`.`pronounciation`"},
	ManagerID:      whereHelperuint{field: "`words`.`manager_id`"},
}

// WordRels is where relationship names are stored.
var WordRels = struct {
	Manager string
	Folders string
	Lessons string
}{
	Manager: "Manager",
	Folders: "Folders",
	Lessons: "Lessons",
}

// wordR is where relationships are stored.
type wordR struct {
	Manager *Manager    `boil:"Manager" json:"Manager" toml:"Manager" yaml:"Manager"`
	Folders FolderSlice `boil:"Folders" json:"Folders" toml:"Folders" yaml:"Folders"`
	Lessons LessonSlice `boil:"Lessons" json:"Lessons" toml:"Lessons" yaml:"Lessons"`
}

// NewStruct creates a new relationship struct
func (*wordR) NewStruct() *wordR {
	return &wordR{}
}

func (r *wordR) GetManager() *Manager {
	if r == nil {
		return nil
	}
	return r.Manager
}

func (r *wordR) GetFolders() FolderSlice {
	if r == nil {
		return nil
	}
	return r.Folders
}

func (r *wordR) GetLessons() LessonSlice {
	if r == nil {
		return nil
	}
	return r.Lessons
}

// wordL is where Load methods for each relationship are stored.
type wordL struct{}

var (
	wordAllColumns            = []string{"id", "word", "definition", "example", "type", "pronounciation", "manager_id"}
	wordColumnsWithoutDefault = []string{"word", "definition", "example", "type", "pronounciation", "manager_id"}
	wordColumnsWithDefault    = []string{"id"}
	wordPrimaryKeyColumns     = []string{"id"}
	wordGeneratedColumns      = []string{}
)

type (
	// WordSlice is an alias for a slice of pointers to Word.
	// This should almost always be used instead of []Word.
	WordSlice []*Word
	// WordHook is the signature for custom Word hook methods
	WordHook func(context.Context, boil.ContextExecutor, *Word) error

	wordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	wordType                 = reflect.TypeOf(&Word{})
	wordMapping              = queries.MakeStructMapping(wordType)
	wordPrimaryKeyMapping, _ = queries.BindMapping(wordType, wordMapping, wordPrimaryKeyColumns)
	wordInsertCacheMut       sync.RWMutex
	wordInsertCache          = make(map[string]insertCache)
	wordUpdateCacheMut       sync.RWMutex
	wordUpdateCache          = make(map[string]updateCache)
	wordUpsertCacheMut       sync.RWMutex
	wordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var wordAfterSelectHooks []WordHook

var wordBeforeInsertHooks []WordHook
var wordAfterInsertHooks []WordHook

var wordBeforeUpdateHooks []WordHook
var wordAfterUpdateHooks []WordHook

var wordBeforeDeleteHooks []WordHook
var wordAfterDeleteHooks []WordHook

var wordBeforeUpsertHooks []WordHook
var wordAfterUpsertHooks []WordHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Word) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Word) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Word) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Word) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Word) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Word) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Word) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Word) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Word) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWordHook registers your hook function for all future operations.
func AddWordHook(hookPoint boil.HookPoint, wordHook WordHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		wordAfterSelectHooks = append(wordAfterSelectHooks, wordHook)
	case boil.BeforeInsertHook:
		wordBeforeInsertHooks = append(wordBeforeInsertHooks, wordHook)
	case boil.AfterInsertHook:
		wordAfterInsertHooks = append(wordAfterInsertHooks, wordHook)
	case boil.BeforeUpdateHook:
		wordBeforeUpdateHooks = append(wordBeforeUpdateHooks, wordHook)
	case boil.AfterUpdateHook:
		wordAfterUpdateHooks = append(wordAfterUpdateHooks, wordHook)
	case boil.BeforeDeleteHook:
		wordBeforeDeleteHooks = append(wordBeforeDeleteHooks, wordHook)
	case boil.AfterDeleteHook:
		wordAfterDeleteHooks = append(wordAfterDeleteHooks, wordHook)
	case boil.BeforeUpsertHook:
		wordBeforeUpsertHooks = append(wordBeforeUpsertHooks, wordHook)
	case boil.AfterUpsertHook:
		wordAfterUpsertHooks = append(wordAfterUpsertHooks, wordHook)
	}
}

// One returns a single word record from the query.
func (q wordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Word, error) {
	o := &Word{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for words")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Word records from the query.
func (q wordQuery) All(ctx context.Context, exec boil.ContextExecutor) (WordSlice, error) {
	var o []*Word

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Word slice")
	}

	if len(wordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Word records in the query.
func (q wordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count words rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q wordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if words exists")
	}

	return count > 0, nil
}

// Manager pointed to by the foreign key.
func (o *Word) Manager(mods ...qm.QueryMod) managerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ManagerID),
	}

	queryMods = append(queryMods, mods...)

	return Managers(queryMods...)
}

// Folders retrieves all the folder's Folders with an executor.
func (o *Word) Folders(mods ...qm.QueryMod) folderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`words_in_folders` on `folders`.`id` = `words_in_folders`.`folder_id`"),
		qm.Where("`words_in_folders`.`word_id`=?", o.ID),
	)

	return Folders(queryMods...)
}

// Lessons retrieves all the lesson's Lessons with an executor.
func (o *Word) Lessons(mods ...qm.QueryMod) lessonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`words_in_lessons` on `lessons`.`id` = `words_in_lessons`.`lesson_id`"),
		qm.Where("`words_in_lessons`.`word_id`=?", o.ID),
	)

	return Lessons(queryMods...)
}

// LoadManager allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (wordL) LoadManager(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWord interface{}, mods queries.Applicator) error {
	var slice []*Word
	var object *Word

	if singular {
		var ok bool
		object, ok = maybeWord.(*Word)
		if !ok {
			object = new(Word)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWord))
			}
		}
	} else {
		s, ok := maybeWord.(*[]*Word)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWord))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &wordR{}
		}
		args = append(args, object.ManagerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &wordR{}
			}

			for _, a := range args {
				if a == obj.ManagerID {
					continue Outer
				}
			}

			args = append(args, obj.ManagerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`managers`),
		qm.WhereIn(`managers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Manager")
	}

	var resultSlice []*Manager
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Manager")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for managers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for managers")
	}

	if len(wordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Manager = foreign
		if foreign.R == nil {
			foreign.R = &managerR{}
		}
		foreign.R.Words = append(foreign.R.Words, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ManagerID == foreign.ID {
				local.R.Manager = foreign
				if foreign.R == nil {
					foreign.R = &managerR{}
				}
				foreign.R.Words = append(foreign.R.Words, local)
				break
			}
		}
	}

	return nil
}

// LoadFolders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (wordL) LoadFolders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWord interface{}, mods queries.Applicator) error {
	var slice []*Word
	var object *Word

	if singular {
		var ok bool
		object, ok = maybeWord.(*Word)
		if !ok {
			object = new(Word)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWord))
			}
		}
	} else {
		s, ok := maybeWord.(*[]*Word)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWord))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &wordR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &wordR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`folders`.`id`, `folders`.`name`, `folders`.`user_id`, `a`.`word_id`"),
		qm.From("`folders`"),
		qm.InnerJoin("`words_in_folders` as `a` on `folders`.`id` = `a`.`folder_id`"),
		qm.WhereIn("`a`.`word_id` in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load folders")
	}

	var resultSlice []*Folder

	var localJoinCols []uint
	for results.Next() {
		one := new(Folder)
		var localJoinCol uint

		err = results.Scan(&one.ID, &one.Name, &one.UserID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for folders")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice folders")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on folders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for folders")
	}

	if len(folderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Folders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &folderR{}
			}
			foreign.R.Words = append(foreign.R.Words, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Folders = append(local.R.Folders, foreign)
				if foreign.R == nil {
					foreign.R = &folderR{}
				}
				foreign.R.Words = append(foreign.R.Words, local)
				break
			}
		}
	}

	return nil
}

// LoadLessons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (wordL) LoadLessons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWord interface{}, mods queries.Applicator) error {
	var slice []*Word
	var object *Word

	if singular {
		var ok bool
		object, ok = maybeWord.(*Word)
		if !ok {
			object = new(Word)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWord))
			}
		}
	} else {
		s, ok := maybeWord.(*[]*Word)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWord))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &wordR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &wordR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`lessons`.`id`, `lessons`.`lesson_name`, `lessons`.`image_url`, `lessons`.`description`, `lessons`.`content`, `lessons`.`manager_id`, `a`.`word_id`"),
		qm.From("`lessons`"),
		qm.InnerJoin("`words_in_lessons` as `a` on `lessons`.`id` = `a`.`lesson_id`"),
		qm.WhereIn("`a`.`word_id` in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load lessons")
	}

	var resultSlice []*Lesson

	var localJoinCols []uint
	for results.Next() {
		one := new(Lesson)
		var localJoinCol uint

		err = results.Scan(&one.ID, &one.LessonName, &one.ImageURL, &one.Description, &one.Content, &one.ManagerID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for lessons")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice lessons")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on lessons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for lessons")
	}

	if len(lessonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Lessons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &lessonR{}
			}
			foreign.R.Words = append(foreign.R.Words, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Lessons = append(local.R.Lessons, foreign)
				if foreign.R == nil {
					foreign.R = &lessonR{}
				}
				foreign.R.Words = append(foreign.R.Words, local)
				break
			}
		}
	}

	return nil
}

// SetManager of the word to the related item.
// Sets o.R.Manager to related.
// Adds o to related.R.Words.
func (o *Word) SetManager(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Manager) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `words` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"manager_id"}),
		strmangle.WhereClause("`", "`", 0, wordPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ManagerID = related.ID
	if o.R == nil {
		o.R = &wordR{
			Manager: related,
		}
	} else {
		o.R.Manager = related
	}

	if related.R == nil {
		related.R = &managerR{
			Words: WordSlice{o},
		}
	} else {
		related.R.Words = append(related.R.Words, o)
	}

	return nil
}

// AddFolders adds the given related objects to the existing relationships
// of the word, optionally inserting them as new records.
// Appends related to o.R.Folders.
// Sets related.R.Words appropriately.
func (o *Word) AddFolders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Folder) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `words_in_folders` (`word_id`, `folder_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &wordR{
			Folders: related,
		}
	} else {
		o.R.Folders = append(o.R.Folders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &folderR{
				Words: WordSlice{o},
			}
		} else {
			rel.R.Words = append(rel.R.Words, o)
		}
	}
	return nil
}

// SetFolders removes all previously related items of the
// word replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Words's Folders accordingly.
// Replaces o.R.Folders with related.
// Sets related.R.Words's Folders accordingly.
func (o *Word) SetFolders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Folder) error {
	query := "delete from `words_in_folders` where `word_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeFoldersFromWordsSlice(o, related)
	if o.R != nil {
		o.R.Folders = nil
	}

	return o.AddFolders(ctx, exec, insert, related...)
}

// RemoveFolders relationships from objects passed in.
// Removes related items from R.Folders (uses pointer comparison, removal does not keep order)
// Sets related.R.Words.
func (o *Word) RemoveFolders(ctx context.Context, exec boil.ContextExecutor, related ...*Folder) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `words_in_folders` where `word_id` = ? and `folder_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeFoldersFromWordsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Folders {
			if rel != ri {
				continue
			}

			ln := len(o.R.Folders)
			if ln > 1 && i < ln-1 {
				o.R.Folders[i] = o.R.Folders[ln-1]
			}
			o.R.Folders = o.R.Folders[:ln-1]
			break
		}
	}

	return nil
}

func removeFoldersFromWordsSlice(o *Word, related []*Folder) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Words {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Words)
			if ln > 1 && i < ln-1 {
				rel.R.Words[i] = rel.R.Words[ln-1]
			}
			rel.R.Words = rel.R.Words[:ln-1]
			break
		}
	}
}

// AddLessons adds the given related objects to the existing relationships
// of the word, optionally inserting them as new records.
// Appends related to o.R.Lessons.
// Sets related.R.Words appropriately.
func (o *Word) AddLessons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Lesson) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `words_in_lessons` (`word_id`, `lesson_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &wordR{
			Lessons: related,
		}
	} else {
		o.R.Lessons = append(o.R.Lessons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &lessonR{
				Words: WordSlice{o},
			}
		} else {
			rel.R.Words = append(rel.R.Words, o)
		}
	}
	return nil
}

// SetLessons removes all previously related items of the
// word replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Words's Lessons accordingly.
// Replaces o.R.Lessons with related.
// Sets related.R.Words's Lessons accordingly.
func (o *Word) SetLessons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Lesson) error {
	query := "delete from `words_in_lessons` where `word_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeLessonsFromWordsSlice(o, related)
	if o.R != nil {
		o.R.Lessons = nil
	}

	return o.AddLessons(ctx, exec, insert, related...)
}

// RemoveLessons relationships from objects passed in.
// Removes related items from R.Lessons (uses pointer comparison, removal does not keep order)
// Sets related.R.Words.
func (o *Word) RemoveLessons(ctx context.Context, exec boil.ContextExecutor, related ...*Lesson) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `words_in_lessons` where `word_id` = ? and `lesson_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeLessonsFromWordsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Lessons {
			if rel != ri {
				continue
			}

			ln := len(o.R.Lessons)
			if ln > 1 && i < ln-1 {
				o.R.Lessons[i] = o.R.Lessons[ln-1]
			}
			o.R.Lessons = o.R.Lessons[:ln-1]
			break
		}
	}

	return nil
}

func removeLessonsFromWordsSlice(o *Word, related []*Lesson) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Words {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Words)
			if ln > 1 && i < ln-1 {
				rel.R.Words[i] = rel.R.Words[ln-1]
			}
			rel.R.Words = rel.R.Words[:ln-1]
			break
		}
	}
}

// Words retrieves all the records using an executor.
func Words(mods ...qm.QueryMod) wordQuery {
	mods = append(mods, qm.From("`words`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`words`.*"})
	}

	return wordQuery{q}
}

// FindWord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWord(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Word, error) {
	wordObj := &Word{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `words` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, wordObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from words")
	}

	if err = wordObj.doAfterSelectHooks(ctx, exec); err != nil {
		return wordObj, err
	}

	return wordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Word) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no words provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(wordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	wordInsertCacheMut.RLock()
	cache, cached := wordInsertCache[key]
	wordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			wordAllColumns,
			wordColumnsWithDefault,
			wordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(wordType, wordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(wordType, wordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `words` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `words` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `words` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, wordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into words")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == wordMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for words")
	}

CacheNoHooks:
	if !cached {
		wordInsertCacheMut.Lock()
		wordInsertCache[key] = cache
		wordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Word.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Word) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	wordUpdateCacheMut.RLock()
	cache, cached := wordUpdateCache[key]
	wordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			wordAllColumns,
			wordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update words, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `words` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, wordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(wordType, wordMapping, append(wl, wordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update words row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for words")
	}

	if !cached {
		wordUpdateCacheMut.Lock()
		wordUpdateCache[key] = cache
		wordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q wordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for words")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for words")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `words` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, wordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in word slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all word")
	}
	return rowsAff, nil
}

var mySQLWordUniqueColumns = []string{
	"id",
	"word",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Word) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no words provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(wordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLWordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	wordUpsertCacheMut.RLock()
	cache, cached := wordUpsertCache[key]
	wordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			wordAllColumns,
			wordColumnsWithDefault,
			wordColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			wordAllColumns,
			wordPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert words, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`words`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `words` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(wordType, wordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(wordType, wordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for words")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == wordMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(wordType, wordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for words")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for words")
	}

CacheNoHooks:
	if !cached {
		wordUpsertCacheMut.Lock()
		wordUpsertCache[key] = cache
		wordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Word record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Word) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Word provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), wordPrimaryKeyMapping)
	sql := "DELETE FROM `words` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from words")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for words")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q wordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no wordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from words")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for words")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(wordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `words` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, wordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from word slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for words")
	}

	if len(wordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Word) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWord(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `words`.* FROM `words` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, wordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WordSlice")
	}

	*o = slice

	return nil
}

// WordExists checks if the Word row exists.
func WordExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `words` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if words exists")
	}

	return exists, nil
}
