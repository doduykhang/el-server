// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserTestDetail is an object representing the database table.
type UserTestDetail struct {
	TestID     uint        `boil:"test_id" json:"testID" toml:"testID" yaml:"testID"`
	QuestionID uint        `boil:"question_id" json:"questionID" toml:"questionID" yaml:"questionID"`
	Answer     null.String `boil:"answer" json:"answer,omitempty" toml:"answer" yaml:"answer,omitempty"`

	R *userTestDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userTestDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserTestDetailColumns = struct {
	TestID     string
	QuestionID string
	Answer     string
}{
	TestID:     "test_id",
	QuestionID: "question_id",
	Answer:     "answer",
}

var UserTestDetailTableColumns = struct {
	TestID     string
	QuestionID string
	Answer     string
}{
	TestID:     "user_test_details.test_id",
	QuestionID: "user_test_details.question_id",
	Answer:     "user_test_details.answer",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var UserTestDetailWhere = struct {
	TestID     whereHelperuint
	QuestionID whereHelperuint
	Answer     whereHelpernull_String
}{
	TestID:     whereHelperuint{field: "`user_test_details`.`test_id`"},
	QuestionID: whereHelperuint{field: "`user_test_details`.`question_id`"},
	Answer:     whereHelpernull_String{field: "`user_test_details`.`answer`"},
}

// UserTestDetailRels is where relationship names are stored.
var UserTestDetailRels = struct {
	Question string
	Test     string
}{
	Question: "Question",
	Test:     "Test",
}

// userTestDetailR is where relationships are stored.
type userTestDetailR struct {
	Question *Question `boil:"Question" json:"Question" toml:"Question" yaml:"Question"`
	Test     *UserTest `boil:"Test" json:"Test" toml:"Test" yaml:"Test"`
}

// NewStruct creates a new relationship struct
func (*userTestDetailR) NewStruct() *userTestDetailR {
	return &userTestDetailR{}
}

func (r *userTestDetailR) GetQuestion() *Question {
	if r == nil {
		return nil
	}
	return r.Question
}

func (r *userTestDetailR) GetTest() *UserTest {
	if r == nil {
		return nil
	}
	return r.Test
}

// userTestDetailL is where Load methods for each relationship are stored.
type userTestDetailL struct{}

var (
	userTestDetailAllColumns            = []string{"test_id", "question_id", "answer"}
	userTestDetailColumnsWithoutDefault = []string{"test_id", "question_id", "answer"}
	userTestDetailColumnsWithDefault    = []string{}
	userTestDetailPrimaryKeyColumns     = []string{"test_id", "question_id"}
	userTestDetailGeneratedColumns      = []string{}
)

type (
	// UserTestDetailSlice is an alias for a slice of pointers to UserTestDetail.
	// This should almost always be used instead of []UserTestDetail.
	UserTestDetailSlice []*UserTestDetail
	// UserTestDetailHook is the signature for custom UserTestDetail hook methods
	UserTestDetailHook func(context.Context, boil.ContextExecutor, *UserTestDetail) error

	userTestDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userTestDetailType                 = reflect.TypeOf(&UserTestDetail{})
	userTestDetailMapping              = queries.MakeStructMapping(userTestDetailType)
	userTestDetailPrimaryKeyMapping, _ = queries.BindMapping(userTestDetailType, userTestDetailMapping, userTestDetailPrimaryKeyColumns)
	userTestDetailInsertCacheMut       sync.RWMutex
	userTestDetailInsertCache          = make(map[string]insertCache)
	userTestDetailUpdateCacheMut       sync.RWMutex
	userTestDetailUpdateCache          = make(map[string]updateCache)
	userTestDetailUpsertCacheMut       sync.RWMutex
	userTestDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userTestDetailAfterSelectHooks []UserTestDetailHook

var userTestDetailBeforeInsertHooks []UserTestDetailHook
var userTestDetailAfterInsertHooks []UserTestDetailHook

var userTestDetailBeforeUpdateHooks []UserTestDetailHook
var userTestDetailAfterUpdateHooks []UserTestDetailHook

var userTestDetailBeforeDeleteHooks []UserTestDetailHook
var userTestDetailAfterDeleteHooks []UserTestDetailHook

var userTestDetailBeforeUpsertHooks []UserTestDetailHook
var userTestDetailAfterUpsertHooks []UserTestDetailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserTestDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserTestDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserTestDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserTestDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserTestDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserTestDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserTestDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserTestDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserTestDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTestDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserTestDetailHook registers your hook function for all future operations.
func AddUserTestDetailHook(hookPoint boil.HookPoint, userTestDetailHook UserTestDetailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userTestDetailAfterSelectHooks = append(userTestDetailAfterSelectHooks, userTestDetailHook)
	case boil.BeforeInsertHook:
		userTestDetailBeforeInsertHooks = append(userTestDetailBeforeInsertHooks, userTestDetailHook)
	case boil.AfterInsertHook:
		userTestDetailAfterInsertHooks = append(userTestDetailAfterInsertHooks, userTestDetailHook)
	case boil.BeforeUpdateHook:
		userTestDetailBeforeUpdateHooks = append(userTestDetailBeforeUpdateHooks, userTestDetailHook)
	case boil.AfterUpdateHook:
		userTestDetailAfterUpdateHooks = append(userTestDetailAfterUpdateHooks, userTestDetailHook)
	case boil.BeforeDeleteHook:
		userTestDetailBeforeDeleteHooks = append(userTestDetailBeforeDeleteHooks, userTestDetailHook)
	case boil.AfterDeleteHook:
		userTestDetailAfterDeleteHooks = append(userTestDetailAfterDeleteHooks, userTestDetailHook)
	case boil.BeforeUpsertHook:
		userTestDetailBeforeUpsertHooks = append(userTestDetailBeforeUpsertHooks, userTestDetailHook)
	case boil.AfterUpsertHook:
		userTestDetailAfterUpsertHooks = append(userTestDetailAfterUpsertHooks, userTestDetailHook)
	}
}

// One returns a single userTestDetail record from the query.
func (q userTestDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserTestDetail, error) {
	o := &UserTestDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_test_details")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserTestDetail records from the query.
func (q userTestDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserTestDetailSlice, error) {
	var o []*UserTestDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserTestDetail slice")
	}

	if len(userTestDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserTestDetail records in the query.
func (q userTestDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_test_details rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userTestDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_test_details exists")
	}

	return count > 0, nil
}

// Question pointed to by the foreign key.
func (o *UserTestDetail) Question(mods ...qm.QueryMod) questionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.QuestionID),
	}

	queryMods = append(queryMods, mods...)

	return Questions(queryMods...)
}

// Test pointed to by the foreign key.
func (o *UserTestDetail) Test(mods ...qm.QueryMod) userTestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TestID),
	}

	queryMods = append(queryMods, mods...)

	return UserTests(queryMods...)
}

// LoadQuestion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTestDetailL) LoadQuestion(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserTestDetail interface{}, mods queries.Applicator) error {
	var slice []*UserTestDetail
	var object *UserTestDetail

	if singular {
		var ok bool
		object, ok = maybeUserTestDetail.(*UserTestDetail)
		if !ok {
			object = new(UserTestDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserTestDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserTestDetail))
			}
		}
	} else {
		s, ok := maybeUserTestDetail.(*[]*UserTestDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserTestDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserTestDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTestDetailR{}
		}
		args = append(args, object.QuestionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTestDetailR{}
			}

			for _, a := range args {
				if a == obj.QuestionID {
					continue Outer
				}
			}

			args = append(args, obj.QuestionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`questions`),
		qm.WhereIn(`questions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Question")
	}

	var resultSlice []*Question
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Question")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for questions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for questions")
	}

	if len(userTestDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Question = foreign
		if foreign.R == nil {
			foreign.R = &questionR{}
		}
		foreign.R.UserTestDetails = append(foreign.R.UserTestDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QuestionID == foreign.ID {
				local.R.Question = foreign
				if foreign.R == nil {
					foreign.R = &questionR{}
				}
				foreign.R.UserTestDetails = append(foreign.R.UserTestDetails, local)
				break
			}
		}
	}

	return nil
}

// LoadTest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTestDetailL) LoadTest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserTestDetail interface{}, mods queries.Applicator) error {
	var slice []*UserTestDetail
	var object *UserTestDetail

	if singular {
		var ok bool
		object, ok = maybeUserTestDetail.(*UserTestDetail)
		if !ok {
			object = new(UserTestDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserTestDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserTestDetail))
			}
		}
	} else {
		s, ok := maybeUserTestDetail.(*[]*UserTestDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserTestDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserTestDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTestDetailR{}
		}
		args = append(args, object.TestID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTestDetailR{}
			}

			for _, a := range args {
				if a == obj.TestID {
					continue Outer
				}
			}

			args = append(args, obj.TestID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_tests`),
		qm.WhereIn(`user_tests.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserTest")
	}

	var resultSlice []*UserTest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserTest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_tests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_tests")
	}

	if len(userTestDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Test = foreign
		if foreign.R == nil {
			foreign.R = &userTestR{}
		}
		foreign.R.TestUserTestDetails = append(foreign.R.TestUserTestDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TestID == foreign.ID {
				local.R.Test = foreign
				if foreign.R == nil {
					foreign.R = &userTestR{}
				}
				foreign.R.TestUserTestDetails = append(foreign.R.TestUserTestDetails, local)
				break
			}
		}
	}

	return nil
}

// SetQuestion of the userTestDetail to the related item.
// Sets o.R.Question to related.
// Adds o to related.R.UserTestDetails.
func (o *UserTestDetail) SetQuestion(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Question) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_test_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"question_id"}),
		strmangle.WhereClause("`", "`", 0, userTestDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TestID, o.QuestionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QuestionID = related.ID
	if o.R == nil {
		o.R = &userTestDetailR{
			Question: related,
		}
	} else {
		o.R.Question = related
	}

	if related.R == nil {
		related.R = &questionR{
			UserTestDetails: UserTestDetailSlice{o},
		}
	} else {
		related.R.UserTestDetails = append(related.R.UserTestDetails, o)
	}

	return nil
}

// SetTest of the userTestDetail to the related item.
// Sets o.R.Test to related.
// Adds o to related.R.TestUserTestDetails.
func (o *UserTestDetail) SetTest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserTest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_test_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"test_id"}),
		strmangle.WhereClause("`", "`", 0, userTestDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TestID, o.QuestionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TestID = related.ID
	if o.R == nil {
		o.R = &userTestDetailR{
			Test: related,
		}
	} else {
		o.R.Test = related
	}

	if related.R == nil {
		related.R = &userTestR{
			TestUserTestDetails: UserTestDetailSlice{o},
		}
	} else {
		related.R.TestUserTestDetails = append(related.R.TestUserTestDetails, o)
	}

	return nil
}

// UserTestDetails retrieves all the records using an executor.
func UserTestDetails(mods ...qm.QueryMod) userTestDetailQuery {
	mods = append(mods, qm.From("`user_test_details`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_test_details`.*"})
	}

	return userTestDetailQuery{q}
}

// FindUserTestDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserTestDetail(ctx context.Context, exec boil.ContextExecutor, testID uint, questionID uint, selectCols ...string) (*UserTestDetail, error) {
	userTestDetailObj := &UserTestDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_test_details` where `test_id`=? AND `question_id`=?", sel,
	)

	q := queries.Raw(query, testID, questionID)

	err := q.Bind(ctx, exec, userTestDetailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_test_details")
	}

	if err = userTestDetailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userTestDetailObj, err
	}

	return userTestDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserTestDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_test_details provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userTestDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userTestDetailInsertCacheMut.RLock()
	cache, cached := userTestDetailInsertCache[key]
	userTestDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userTestDetailAllColumns,
			userTestDetailColumnsWithDefault,
			userTestDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userTestDetailType, userTestDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userTestDetailType, userTestDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_test_details` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_test_details` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_test_details` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userTestDetailPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_test_details")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TestID,
		o.QuestionID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_test_details")
	}

CacheNoHooks:
	if !cached {
		userTestDetailInsertCacheMut.Lock()
		userTestDetailInsertCache[key] = cache
		userTestDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserTestDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserTestDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userTestDetailUpdateCacheMut.RLock()
	cache, cached := userTestDetailUpdateCache[key]
	userTestDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userTestDetailAllColumns,
			userTestDetailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_test_details, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_test_details` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userTestDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userTestDetailType, userTestDetailMapping, append(wl, userTestDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_test_details row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_test_details")
	}

	if !cached {
		userTestDetailUpdateCacheMut.Lock()
		userTestDetailUpdateCache[key] = cache
		userTestDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userTestDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_test_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_test_details")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserTestDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTestDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_test_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userTestDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userTestDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userTestDetail")
	}
	return rowsAff, nil
}

var mySQLUserTestDetailUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserTestDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_test_details provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userTestDetailColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserTestDetailUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userTestDetailUpsertCacheMut.RLock()
	cache, cached := userTestDetailUpsertCache[key]
	userTestDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userTestDetailAllColumns,
			userTestDetailColumnsWithDefault,
			userTestDetailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userTestDetailAllColumns,
			userTestDetailPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_test_details, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_test_details`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_test_details` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userTestDetailType, userTestDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userTestDetailType, userTestDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_test_details")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userTestDetailType, userTestDetailMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_test_details")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_test_details")
	}

CacheNoHooks:
	if !cached {
		userTestDetailUpsertCacheMut.Lock()
		userTestDetailUpsertCache[key] = cache
		userTestDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserTestDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserTestDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserTestDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userTestDetailPrimaryKeyMapping)
	sql := "DELETE FROM `user_test_details` WHERE `test_id`=? AND `question_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_test_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_test_details")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userTestDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userTestDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_test_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_test_details")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserTestDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userTestDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTestDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_test_details` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userTestDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userTestDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_test_details")
	}

	if len(userTestDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserTestDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserTestDetail(ctx, exec, o.TestID, o.QuestionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserTestDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserTestDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTestDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_test_details`.* FROM `user_test_details` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userTestDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserTestDetailSlice")
	}

	*o = slice

	return nil
}

// UserTestDetailExists checks if the UserTestDetail row exists.
func UserTestDetailExists(ctx context.Context, exec boil.ContextExecutor, testID uint, questionID uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_test_details` where `test_id`=? AND `question_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, testID, questionID)
	}
	row := exec.QueryRowContext(ctx, sql, testID, questionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_test_details exists")
	}

	return exists, nil
}
